---
# Source: kronicle/charts/kronicle/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kronicle-app
  labels:
    app: kronicle-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kronicle-app
  template:
    metadata:
      labels:
        app: kronicle-app
    spec:
      containers:
        - name: kronicle-app
          image: ghcr.io/kronicle-tech/kronicle-app:1.2.3
          env:
            - name: "ANALYTICS_PLAUSIBLE_DATA_DOMAIN"
              value: "demo.external.example.com"
            - name: "ANALYTICS_PLAUSIBLE_ENABLED"
              value: "true"
            - name: "CLIENT_SIDE_SERVICE_BASE_URL"
              value: "https://demo-service.external.example.com"
            - name: "INTRO_MARKDOWN"
              value: "This is a live demo for [Kronicle](https://kronicle.tech). Kronicle is an open source system for\ndocumenting and visualising a tech stack, including software and infrastructure.\n\nKronicle can help your teams with these kinds of questions:\n\n<h4 class=\"text-success\">What are all the components my team owns?</h4>\n\nWhen teams are merged, teams are split and components moved from one team to another, it can be\ndifficult for team members to remember all the components they own, especially the less frequently\nchanged components. Kronicle provides each team with:\n\n* [A page that lists all of a team's components](/teams/kronicle-project/components), including any extra info about how they own those components - is a component shared with another team, is the team a secondary owner with another team having primary ownership of a component etc.\n* Kronicle also provides each area with [a page that shows all components owned by that area's team(s)](/areas/kronicle-computers/components).\n\n<h4 class=\"text-success\">Who owns a particular component?</h4>\n\nEach component in Kronical has a\n[page that lists the team(s) that own that component](/components/user-service).\n\n<h4 class=\"text-success\">How do I get in touch with a particular team?</h4>\n\nEach team has a\n[page that includes a description of the team and can include links to Slack channels, wiki pages etc.](/teams/frontend)\n\n<h4 class=\"text-success\">How does a particular component fit into the tech stack?</h4>\n\nEach component has a\n[page that shows an autogenerated diagram of the components it calls and the components called by it](/components/kronicle-service/dependencies).\nThe page inclues filters that control what is shown in the diagram.\n\n<h4 class=\"text-success\">What API endpoints does a particular service have?</h4>\n\nKronicle fully supports OpenAPI specs.  URLs for OpenaPI specs can be added to a `kronicle.yaml` file\nin a component's Git repo with YAML like this:\n\n```yaml\nopenApiSpecs:\n - url: https://example-service/openapi\n   description: |\n     OpenAPI spec for the Example Service in production\n```\n\nThis approach can work well if a service is using something like [Springdoc](https://springdoc.org)\nto dynamically generate and serve an OpenAPI spec.\n\nKronicle can also auto-discover any OpenAPI spec files checked into a component's Git repo.\n\nKronicle provides the following types of pages:\n\n* [All the OpenAPI specs in Kronicle](https://demo.kronicle.tech/all-components/openapi-specs)\n* [All the OpenAPI specs in an area](https://demo.kronicle.tech/areas/kronicle-project/openapi-specs)\n* [All the OpenAPI specs in a team](https://demo.kronicle.tech/teams/kronicle-project/openapi-specs)\n* [The OpenAPI spec(s) for an individual component](https://demo.kronicle.tech/components/kronicle-service/openapi-specs)\n\nYou can then click through to view\n[an invidual OpenAPI spec rendered automatically using Redoc](https://demo.kronicle.tech/components/kronicle-service/openapi-specs/1).\n\n<h4 class=\"text-success\">What significant tech debt does my team have?</h4>\n\nIn Kronicle, tech debt items can recorded against components.  Kronicle provides the following types\nof pages:\n\n* Each component has a [page that shows the component's tech debt](/components/kronicle-service/tech-debts), if any\n* Each team has a [page that shows the tech debt for all the components the team owns](/teams/kronicle-project/tech-debts)\n* Each area has a [page that shows all the tech debt for the teams in that area](/areas/kronicle-project/tech-debts)\n\nTech debt items have a descrition and a priority level.  Optionally that can include further notes and\nlinks to external resources like wikis, issue tickets etc.\n\n<h4 class=\"text-success\">What Cross Functional Requirements does my team's components have to meet?</h4>\n\nIn Kronicle, cross functional requirements (CFRs or NFRs) can also be recorded against components.\nKronicle provides the following types of pages for CFRs:\n\n* Each component has a [page that shows the component's CFRs](/components/kronicle-service/cross-functional-requirements), if any\n* Each team has a [page that shows the CFRs for all the components the team owns](/teams/kronicle-project/cross-functional-requirements)\n* Each area has a [page that shows all the CFRs for the teams in that area](/areas/kronicle-project/cross-functional-requirements)\n\nCFRs have a descrition.  Optionally that can include further notes and links to external resources like\nwikis, issue tickets etc.\n\n<h4 class=\"text-success\">Which components have more than 80% code coverage and which have less?</h4>\n\nIf you use SonarQube, Kronicle can collect the code coverage figure from SonarQube for each component.\nKronicle provides pages that show the code coverage status for:\n\n* [All components](/tests/sonar-qube-code-coverage)\n* [All components in an area](/areas/kronicle-project/tests/sonar-qube-code-coverage)\n* [All components in a team](/teams/kronicle-project/tests/sonar-qube-code-coverage)\n\n<h4 class=\"text-success\">What are the response times for my component?</h4>\n\nIf you are using Zipkin for distributed tracing, Kronicle can show the response times for\n[incoming requests](/components/kronicle-service/response-times) and\n[outgoing requests](/components/kronicle-service/downstream-response-times).\n\n<h4 class=\"text-success\">The rest of this page</h4>\n\nFor a summary of all the types of data in this demo, see the following parts of this page.\n"
            - name: "INTRO_TITLE"
              value: "Kronicle Live Demo"
            - name: "SERVER_SIDE_SERVICE_BASE_URL"
              value: "http://kronicle-service.kronicle.svc.cluster.local"
          ports:
            - containerPort: 3000
---
# Source: kronicle/charts/kronicle/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kronicle-service
  labels:
    app: kronicle-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kronicle-service
  template:
    metadata:
      labels:
        app: kronicle-service
    spec:
      containers:
        - name: kronicle-service
          image: ghcr.io/kronicle-tech/kronicle-service:1.2.3
          env:
            - name: "KEY_SOFTWARE_RULES_0_NAME"
              value: "Gradle"
            - name: "KEY_SOFTWARE_RULES_0_SOFTWARE_NAME_PATTERN"
              value: "^gradle-wrapper$"
            - name: "KEY_SOFTWARE_RULES_10_NAME"
              value: "Micronaut"
            - name: "KEY_SOFTWARE_RULES_10_SOFTWARE_NAME_PATTERN"
              value: "^io.micronaut:micronaut-bom$"
            - name: "KEY_SOFTWARE_RULES_1_NAME"
              value: "Spring Boot"
            - name: "KEY_SOFTWARE_RULES_1_SOFTWARE_NAME_PATTERN"
              value: "^org.springframework.boot:"
            - name: "KEY_SOFTWARE_RULES_2_NAME"
              value: "Guava"
            - name: "KEY_SOFTWARE_RULES_2_SOFTWARE_NAME_PATTERN"
              value: "^com.google.guava:guava$"
            - name: "KEY_SOFTWARE_RULES_3_NAME"
              value: "Zipkin Brave"
            - name: "KEY_SOFTWARE_RULES_3_SOFTWARE_NAME_PATTERN"
              value: "^io.zipkin.brave:brave$"
            - name: "KEY_SOFTWARE_RULES_4_NAME"
              value: "Dropwizard"
            - name: "KEY_SOFTWARE_RULES_4_SOFTWARE_NAME_PATTERN"
              value: "^io.dropwizard:dropwizard-core$"
            - name: "KEY_SOFTWARE_RULES_5_NAME"
              value: "MongoDB Driver"
            - name: "KEY_SOFTWARE_RULES_5_SOFTWARE_NAME_PATTERN"
              value: "^org.mongodb:(mongodb-driver|mongo-java-driver)$"
            - name: "KEY_SOFTWARE_RULES_6_NAME"
              value: "Jackson"
            - name: "KEY_SOFTWARE_RULES_6_SOFTWARE_NAME_PATTERN"
              value: "^com.fasterxml.jackson.core:"
            - name: "KEY_SOFTWARE_RULES_7_NAME"
              value: "Spring Cloud"
            - name: "KEY_SOFTWARE_RULES_7_SOFTWARE_NAME_PATTERN"
              value: "^org.springframework.cloud:spring-cloud-dependencies$"
            - name: "KEY_SOFTWARE_RULES_8_NAME"
              value: "Lombok"
            - name: "KEY_SOFTWARE_RULES_8_SOFTWARE_NAME_PATTERN"
              value: "^org.projectlombok:lombok$"
            - name: "KEY_SOFTWARE_RULES_9_NAME"
              value: "Kotlin"
            - name: "KEY_SOFTWARE_RULES_9_SOFTWARE_NAME_PATTERN"
              value: "^org.jetbrains.kotlin:kotlin-bom$"
            - name: "OPENAPI_SPEC_SERVERS_0_DESCRIPTION"
              value: "The demo instance of Kronicle Service"
            - name: "OPENAPI_SPEC_SERVERS_0_URL"
              value: "https://demo-service.external.example.com"
            - name: "REPO_FINDERS_GITHUB_ORGANIZATIONS_0_ACCOUNT_NAME"
              value: "kronicle-tech"
            - name: "REPO_FINDERS_GITHUB_ORGANIZATIONS_1_ACCOUNT_NAME"
              value: "kronicle-computers"
            - name: "REPO_FINDERS_IGNORED_REPOS_0_URL"
              value: "https://github.com/kronicle-tech/kronicle-metadata-repo-template.git"
            - name: "REPO_FINDERS_IGNORED_REPOS_1_URL"
              value: "https://github.com/kronicle-tech/kronicle-metadata-codebase-template.git"
            - name: "SONARQUBE_BASE_URL"
              value: "https://sonarcloud.io"
            - name: "SONARQUBE_ORGANIZATIONS_0"
              value: "kronicle-tech"
            - name: "ZIPKIN_BASE_URL"
              value: "http://zipkin.zipkin.svc.cluster.local"
            - name: "ZIPKIN_SAMPLE_RATE"
              value: "1.0"
            - name: "REPO_FINDERS_GITHUB_ORGANIZATIONS_0_PERSONAL_ACCESS_TOKEN_USERNAME"
              valueFrom:
                secretKeyRef:
                  name: "kronicle-service-config"
                  key: "github-repo-finder-username"
            - name: "REPO_FINDERS_GITHUB_ORGANIZATIONS_0_PERSONAL_ACCESS_TOKEN_VALUE"
              valueFrom:
                secretKeyRef:
                  name: "kronicle-service-config"
                  key: "github-repo-finder-personal-access-token"
            - name: "REPO_FINDERS_GITHUB_ORGANIZATIONS_1_PERSONAL_ACCESS_TOKEN_USERNAME"
              valueFrom:
                secretKeyRef:
                  name: "kronicle-service-config"
                  key: "github-repo-finder-username"
            - name: "REPO_FINDERS_GITHUB_ORGANIZATIONS_1_PERSONAL_ACCESS_TOKEN_VALUE"
              valueFrom:
                secretKeyRef:
                  name: "kronicle-service-config"
                  key: "github-repo-finder-personal-access-token"
          ports:
            - containerPort: 8090
