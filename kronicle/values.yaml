kronicle:
  version: 0.1.87
  
  app:
    env:
      ANALYTICS_PLAUSIBLE_ENABLED: "true"
      INTRO_TITLE: Kronicle Live Demo
      INTRO_MARKDOWN: |
        This is a live demo for [Kronicle](https://kronicle.tech). Kronicle is an open source system for
        documenting and visualising a tech stack, including software and infrastructure.

        Kronicle can help your teams with these kinds of questions:

        <h4 class="text-success">What are all the components my team owns?</h4>

        When teams are merged, teams are split and components moved from one team to another, it can be
        difficult for team members to remember all the components they own, especially the less frequently
        changed components.

        Kronicle provides each team with:

        * [A page that lists all of a team's components](/teams/kronicle-project/components), including any extra info about how they own those components - is a component shared with another team, is the team a secondary owner with another team having primary ownership of a component etc.
        * Kronicle also provides each area with [a page that shows all components owned by that area's team(s)](/areas/kronicle-computers/components).

        <h4 class="text-success">Who owns a particular component?</h4>

        Each component in Kronical has a
        [page that lists the team(s) that own that component](/components/user-service).

        <h4 class="text-success">How do I get in touch with a particular team?</h4>

        Each team has a
        [page that includes a description of the team and can include links to Slack channels, wiki pages etc.](/teams/frontend)

        <h4 class="text-success">How does a particular component fit into the tech stack?</h4>

        Each component has a
        [page that displays an auto-generated diagram of the components it calls and the components called by it](/components/kronicle-service/dependencies)
        which includes filters controlling what is shown in the diagram.

        <h4 class="text-success">What API endpoints does a particular service have?</h4>

        Kronicle fully supports OpenAPI specs.

        URLs for OpenaPI specs can be added to a `kronicle.yaml` file in a component's Git repo with YAML like this:

        ```yaml
        openApiSpecs:
          - url: https://example-service/openapi
            description: |
              OpenAPI spec for the Example Service in production
        ```

        This approach can work well if a service is using something like [Springdoc](https://springdoc.org)
        to dynamically generate and serve an OpenAPI spec.

        Kronicle can also auto-discover any OpenAPI spec files checked into a component's Git repo.

        Kronicle provides the following types of pages:

        * [All the OpenAPI specs in Kronicle](https://demo.kronicle.tech/all-components/openapi-specs)
        * [All the OpenAPI specs in an area](https://demo.kronicle.tech/areas/kronicle-project/openapi-specs)
        * [All the OpenAPI specs in a team](https://demo.kronicle.tech/teams/kronicle-project/openapi-specs)
        * [The OpenAPI spec(s) for an individual component](https://demo.kronicle.tech/components/kronicle-service/openapi-specs)

        You can then click through to view
        [an individual OpenAPI spec rendered automatically using Redoc](https://demo.kronicle.tech/components/kronicle-service/openapi-specs/1).

        <h4 class="text-success">What significant tech debt does my team have?</h4>

        In Kronicle, tech debt can be visualised in the following ways:

        * Each component has a [page that shows the component's tech debt](/components/kronicle-service/tech-debts), if any
        * Each team has a [page that shows the tech debt for all the components the team owns](/teams/kronicle-project/tech-debts)
        * Each area has a [page that shows all the tech debt for the teams in that area](/areas/kronicle-project/tech-debts)

        Tech debt items have a description and a priority level.

        Optionally a tech debt item can include further notes and links to external webpages e.g. wiki pages, Jira
        tickets etc.

        <h4 class="text-success">What Cross Functional Requirements does my team's components have to meet?</h4>

        In Kronicle, cross functional requirements (CFRs or NFRs) can also be recorded against components.
        Kronicle provides the following types of pages for CFRs:

        * Each component has a [page that shows the component's CFRs](/components/kronicle-service/cross-functional-requirements), if any
        * Each team has a [page that shows the CFRs for all the components the team owns](/teams/kronicle-project/cross-functional-requirements)
        * Each area has a [page that shows all the CFRs for the teams in that area](/areas/kronicle-project/cross-functional-requirements)

        CFRs have a description.

        Optionally a CFR can include further notes and links to external webpages.

        <h4 class="text-success">Which components have more than 80% code coverage and which have less?</h4>

        If you use SonarQube, Kronicle can collect the code coverage figure from SonarQube for each component.

        Kronicle also provides pages that display the code coverage status for:

        * [All components](/tests/sonar-qube-code-coverage)
        * [All components in an area](/areas/kronicle-project/tests/sonar-qube-code-coverage)
        * [All components in a team](/teams/kronicle-project/tests/sonar-qube-code-coverage)

        <h4 class="text-success">What are the response times for my component?</h4>

        If you are using Zipkin for distributed tracing, Kronicle can show the response times for
        [incoming requests](/components/kronicle-service/response-times) and
        [outgoing requests](/components/kronicle-service/downstream-response-times).

        <h4 class="text-success">The rest of this page</h4>

        For a summary of all the types of data in this demo, see the following parts of this page.

  service:
    env:
      OPENAPI_SPEC_CLEAR_EXISTING_SERVERS: "true"
      OPENAPI_SPEC_SERVERS_0_DESCRIPTION: The demo instance of Kronicle Service
      REPO_FINDERS_IGNORED_REPOS_0_URL: https://github.com/kronicle-tech/kronicle-metadata-repo-template.git
      REPO_FINDERS_IGNORED_REPOS_1_URL: https://github.com/kronicle-tech/kronicle-metadata-codebase-template.git
      REPO_FINDERS_GITHUB_ORGANIZATIONS_0_ACCOUNT_NAME: kronicle-tech
      REPO_FINDERS_GITHUB_ORGANIZATIONS_1_ACCOUNT_NAME: kronicle-computers
      KEY_SOFTWARE_RULES_0_SOFTWARE_NAME_PATTERN: "^gradle-wrapper$"
      KEY_SOFTWARE_RULES_0_NAME: "Gradle"
      KEY_SOFTWARE_RULES_1_SOFTWARE_NAME_PATTERN: "^org.springframework.boot:"
      KEY_SOFTWARE_RULES_1_NAME: "Spring Boot"
      KEY_SOFTWARE_RULES_2_SOFTWARE_NAME_PATTERN: "^com.google.guava:guava$"
      KEY_SOFTWARE_RULES_2_NAME: "Guava"
      KEY_SOFTWARE_RULES_3_SOFTWARE_NAME_PATTERN: "^io.zipkin.brave:brave$"
      KEY_SOFTWARE_RULES_3_NAME: "Zipkin Brave"
      KEY_SOFTWARE_RULES_4_SOFTWARE_NAME_PATTERN: "^io.dropwizard:dropwizard-core$"
      KEY_SOFTWARE_RULES_4_NAME: "Dropwizard"
      KEY_SOFTWARE_RULES_5_SOFTWARE_NAME_PATTERN: "^org.mongodb:(mongodb-driver|mongo-java-driver)$"
      KEY_SOFTWARE_RULES_5_NAME: "MongoDB Driver"
      KEY_SOFTWARE_RULES_6_SOFTWARE_NAME_PATTERN: "^com.fasterxml.jackson.core:"
      KEY_SOFTWARE_RULES_6_NAME: "Jackson"
      KEY_SOFTWARE_RULES_7_SOFTWARE_NAME_PATTERN: "^org.springframework.cloud:spring-cloud-dependencies$"
      KEY_SOFTWARE_RULES_7_NAME: "Spring Cloud"
      KEY_SOFTWARE_RULES_8_SOFTWARE_NAME_PATTERN: "^org.projectlombok:lombok$"
      KEY_SOFTWARE_RULES_8_NAME: "Lombok"
      KEY_SOFTWARE_RULES_9_SOFTWARE_NAME_PATTERN: "^org.jetbrains.kotlin:kotlin-bom$"
      KEY_SOFTWARE_RULES_9_NAME: "Kotlin"
      KEY_SOFTWARE_RULES_10_SOFTWARE_NAME_PATTERN: "^io.micronaut:micronaut-bom$"
      KEY_SOFTWARE_RULES_10_NAME: "Micronaut"
      ZIPKIN_BASE_URL: http://zipkin.zipkin.svc.cluster.local
      ZIPKIN_SAMPLE_RATE: "1.0"
      SONARQUBE_BASE_URL: https://sonarcloud.io
      SONARQUBE_ORGANIZATIONS_0: kronicle-tech
    secrets:
      REPO_FINDERS_GITHUB_ORGANIZATIONS_0_PERSONAL_ACCESS_TOKEN_USERNAME:
        secretName: kronicle-service-config
        secretKey: github-repo-finder-username
      REPO_FINDERS_GITHUB_ORGANIZATIONS_0_PERSONAL_ACCESS_TOKEN_VALUE:
        secretName: kronicle-service-config
        secretKey: github-repo-finder-personal-access-token
      REPO_FINDERS_GITHUB_ORGANIZATIONS_1_PERSONAL_ACCESS_TOKEN_USERNAME:
        secretName: kronicle-service-config
        secretKey: github-repo-finder-username
      REPO_FINDERS_GITHUB_ORGANIZATIONS_1_PERSONAL_ACCESS_TOKEN_VALUE:
        secretName: kronicle-service-config
        secretKey: github-repo-finder-personal-access-token
